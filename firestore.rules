rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function getUserRole() {
      return request.auth != null
        ? (
            exists(/databases/$(database)/documents/users/$(request.auth.uid))
              ? (
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role is string
                    ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
                    : ''
                )
              : ''
          )
        : '';
    }

    function isAdminUser() {
      return getUserRole() == 'admin';
    }

    function isAuthenticatedUser(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isCompanyOwner(companyId) {
      return request.auth != null && request.auth.uid == companyId;
    }

    function isNonAdminRole(role) {
      return role == 'company' || role == 'user';
    }

    match /companies/{companyId} {
      // Owners can manage their own company profile
      allow create: if isCompanyOwner(companyId);
      allow read: if (resource != null && resource.data.verified == true) || isCompanyOwner(companyId) || isAdminUser();
      allow update: if
        (isCompanyOwner(companyId) &&
        (
          request.resource.data.verified == resource.data.verified ||
          (resource.data.verified == false && request.resource.data.verified == true)
        )) ||
        isAdminUser();
      allow delete: if isCompanyOwner(companyId) || isAdminUser();
    }

    match /notify_me/{docId} {
      // Anyone may add an email address
      allow create: if true;
      allow read, update, delete: if false;
    }

    match /users/{userId} {
      allow create: if isAuthenticatedUser(userId)
        && request.resource.data.keys().hasOnly(['email', 'role', 'created_at', 'updated_at'])
        && request.resource.data.email is string
        && request.resource.data.email.size() > 0
        && isNonAdminRole(request.resource.data.role)
        && request.resource.data.created_at is timestamp
        && request.resource.data.updated_at is timestamp;

      allow read: if isAuthenticatedUser(userId) || isAdminUser();

      allow update: if (
          isAuthenticatedUser(userId)
          && request.resource.data.keys().hasOnly(['email', 'role', 'created_at', 'updated_at'])
          && request.resource.data.email is string
          && request.resource.data.email.size() > 0
          && request.resource.data.role == resource.data.role
          && request.resource.data.created_at == resource.data.created_at
          && request.resource.data.updated_at is timestamp
        ) || isAdminUser();

      allow delete: if isAdminUser();
    }

    match /reviews/{reviewId} {
      allow read: if true;
      allow create, update, delete: if isAdminUser();
    }

    match /review_requests/{requestId} {
      allow create: if request.resource.data.keys().hasOnly([
            'company_id',
            'company_name',
            'contact_type',
            'customer_email',
            'created_at',
            'status'
          ]) &&
          request.resource.data.keys().hasAll([
            'company_id',
            'company_name',
            'contact_type',
            'customer_email',
            'created_at',
            'status'
          ]) &&
          request.resource.data.company_id is string &&
          request.resource.data.company_id.size() > 0 &&
          request.resource.data.company_name is string &&
          request.resource.data.company_name.size() > 0 &&
          request.resource.data.contact_type is string &&
          request.resource.data.contact_type.size() > 0 &&
          request.resource.data.customer_email is string &&
          request.resource.data.customer_email.size() > 0 &&
          request.resource.data.created_at is timestamp &&
          request.resource.data.status is string &&
          request.resource.data.status.size() > 0;

      allow read, update, delete: if false;
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
